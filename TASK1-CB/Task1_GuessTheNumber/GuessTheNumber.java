import java.util.Scanner;

/**
 * This program generates a random number between 1 and 100 and asks the user to guess the number.
 * The user has 10 guesses to guess the number correctly.
 * <p>
 * If the user guesses the number correctly, the program prints "You guessed the number!" and exits.
 * <p>
 * If the user does not guess the number correctly, the program prints "Your guess is too high!" or
 * "Your guess is too low!" depending on whether the guess is higher or lower than the random number.
 * <p>
 * If the user does not guess the number correctly in 10 guesses, the program prints
 * "You ran out of guesses!" and exits.
 * <p>
 * The program also prints the random number after the user has run out of guesses.
 * <p>
 * The program then asks the user if they want to play again. If the user enters "yes", the program
 * generates a new random number and asks the user to guess the number again.
 * If the user enters "no", the program exits.
 *
 * @author <a href="https://github.com/itsyourap">Ankan Pal</a>
 */

public class GuessTheNumber {
    // The minimum number generated by the random number generator
    private static final int MIN_RANDOM_NUMBER = 1;
    // The maximum number generated by the random number generator
    private static final int MAX_RANDOM_NUMBER = 100;
    // The maximum number of guesses allowed
    private static final int MAX_GUESSES = 10;
    // The random number generated by the random number generator
    private static int randomNumber;
    // The number of rounds played by the user
    private static int roundNumber = 0;
    // The points earned by the user throughout all the rounds
    private static int totalPoints = 0;
    // The scanner object used to take input from the user
    private static Scanner scanner;

    public static void main(String[] args) {
        // Initialize the scanner object
        scanner = new Scanner(System.in);

        // Start the game
        playGame();

        // Close the scanner object
        scanner.close();
    }

    /**
     * This method starts the game.
     * <p>
     * The game works as commented in the class documentation.
     * The method also asks the user if they want to play again.
     * If the user enters "yes", the method calls itself again (restarts the game again).
     */
    private static void playGame() {
        roundNumber++;
        System.out.printf("Round %d\n", roundNumber);
        System.out.println("---------------------------------");

        renewRandomNumber();
        System.out.println("Try to guess it!");
        System.out.printf("You have %d tries\n", MAX_GUESSES);

        int guessCount = 1;

        while (guessCount <= MAX_GUESSES) {
            System.out.printf("[Guess %d] Enter your guess: ", guessCount);
            int guess = scanner.nextInt();
            if (checkGuess(guess)) {
                int point = MAX_GUESSES - guessCount + 1;
                totalPoints += point;
                System.out.printf("You scored %d points out of %d\n", point, MAX_GUESSES);
                break;
            }
            System.out.printf("You have %d guesses left\n\n", MAX_GUESSES - guessCount);
            guessCount++;
        }

        if (guessCount > MAX_GUESSES) {
            System.out.println("You ran out of guesses!");
            System.out.printf("The number was %d\n", randomNumber);
        }

        System.out.println("---------------------------------\n");
        System.out.print("Do you want to play another round? [yes (y) / no (n)] [default: no] : ");
        String playAgain = scanner.next();
        System.out.println();
        if (playAgain.equalsIgnoreCase("yes") || playAgain.equalsIgnoreCase("y"))
            playGame();
        else {
            displayTotalPoints();
            System.out.println("Thanks for playing!");
        }
    }

    /**
     * This method checks if the user's guess is correct.
     * <p>
     * If the user's guess is lower than the random number, the method prints "Your guess is too low!".
     * <p>
     * If the user's guess is higher than the random number, the method prints "Your guess is too high!".
     * <p>
     * If the user's guess is correct, the method prints "Congrats! You guessed the number correctly!".
     *
     * @param guess The user's guess
     * @return true if the user's guess is correct, false otherwise
     */
    private static boolean checkGuess(int guess) {
        if (guess < MIN_RANDOM_NUMBER || guess > MAX_RANDOM_NUMBER) {
            System.out.printf("Your guess should be between %d and %d\n", MIN_RANDOM_NUMBER, MAX_RANDOM_NUMBER);
            return false;
        }

        if (guess == randomNumber) {
            System.out.println("Congrats! You guessed the number correctly!");
            return true;
        } else if (guess > randomNumber)
            System.out.println("Your guess is too high!");
        else
            System.out.println("Your guess is too low!");
        return false;
    }

    /**
     * This method generates a new random number between {@link #MIN_RANDOM_NUMBER} and {@link #MAX_RANDOM_NUMBER}
     * and assigns it to {@link #randomNumber}.
     * <p>
     * This method also prints a message to the console informing the user that a new random number has been
     * generated.
     */
    private static void renewRandomNumber() {
        randomNumber = (int) (Math.random() * (MAX_RANDOM_NUMBER - MIN_RANDOM_NUMBER + 1)) + MIN_RANDOM_NUMBER;
        System.out.printf("A random number has been generated between %d and %d", MIN_RANDOM_NUMBER, MAX_RANDOM_NUMBER);
        System.out.println();
    }

    /**
     * This method displays the total points scored by the user throughout all the rounds.
     */
    private static void displayTotalPoints() {
        System.out.printf("You scored total %d points out of %d\n", totalPoints, MAX_GUESSES * roundNumber);
    }
}